

export const brickColors = [
    "#00FFFF",
    "#FFFF80",
    "#FF8080",
    "#FF8040",
    "#8080FF",
    "#8080C0",
    "#00FF80",
    "#808080",
    "#C0C0C0",
    "#808000",
    "#000080",
    "#FF0080",
    "#FF80FF",
    "#8080C0",
    "#FF8000",
    "#80FF80"
];

export const squarePosX = [ 
    [ [ 4, 4, 4, 4 ], [ -1, 0, 1, 2 ],  [ 2, 1, 0, -1 ],  [ 1, 0, -1, -2 ], [ -2, -1, 0, 1 ] ],		// 0
    [ [ 4, 4, 4, 5 ], [ -1, 0, 1, -1 ], [ 1, 0, -1, -1 ], [ 1, 0, -1, 1 ],  [ -1, 0, 1, 1 ] ],		// 1
    [ [ 3, 3, 4, 5 ], [ 0, 1, 0, -1 ],  [ 2, 1, 0, -1 ],  [ 0, -1, 0, 1 ],  [ -2, -1, 0, 1 ] ],		// 2
    [ [ 3, 4, 5, 5 ], [ 1, 0, -1, -2 ], [ 1, 0, -1, 0 ],  [ -1, 0 ,1, 2 ],  [ -1, 0, 1, 0 ] ],		// 3
    [ [	4, 4, 5, 5 ], [ 0, 1, 0, 1 ],   [ 2, 1, 0, -1 ],  [ 0, -1, 0, -1 ], [ -2, -1, 0, 1 ] ],		// 4
    [ [ 5, 5, 4, 4 ], [ -1, 0, 1, 2 ],  [ 1, 0, 1, 0 ],   [ 1, 0, -1, -2 ], [ -1, 0, -1, 0 ] ],		// 5
    [ [ 4, 5, 4, 5 ] ],																				// 6
    [ [ 5, 4, 4, 4 ], [ -2, 0, 1, 2 ],  [ 1, 1, 0, -1 ],  [ 2, 0, -1, -2 ], [ -1, -1, 0, 1 ] ],		// 7
    [ [ 4, 5, 5, 5 ], [ -1, -1, 0, 1 ], [ 2, 0, -1, -2 ], [ 1, 1, 0, -1 ],  [ -2, 0, 1, 2 ] ],		// 8
    [ [ 5, 4, 4, 5 ], [ -2, 0, 1, 1 ],  [ 1, 1, 0, -2 ],  [ 2, 0, -1, -1 ], [ -1, -1, 0, 2 ] ],		// 9
    [ [ 4, 5, 4, 5 ], [ -1, -1, 1, 1 ], [ 2, 0, 0, -2 ],  [ 1, 1, -1, -1 ], [ -2, 0, 0, 2 ] ],		// 10
    [ [ 5, 4, 5, 4 ], [ -2, 0, 0, 2 ],  [ 1, 1, -1, -1 ], [ 2, 0, 0, -2 ],  [ -1, -1, 1, 1 ] ]		// 11
];

export const squarePosY = [
    [ [ 0, 1, 2, 3 ], [ 2, 1, 0, -1 ],  [ 1 ,0, -1, -2 ], [ -2, -1, 0, 1 ], [-1 ,0, 1, 2 ] ],		// 0
    [ [ 0, 1, 2, 1 ], [ 1, 0, -1, -1 ], [ 1, 0, -1, 1 ],  [-1 ,0, 1, 1 ],   [ -1, 0, 1, -1 ] ],		// 1
    [ [ 0, 1, 1, 1 ], [ 2, 1, 0, -1 ],  [ 0, -1, 0, 1 ],  [ -2, -1, 0, 1 ], [ 0, 1, 0, -1 ] ],		// 2
    [ [ 1, 1, 1, 0 ], [ 1, 0, -1, 0 ],  [ -1, 0, 1, 2 ],  [ -1, 0, 1, 0 ],  [ 1, 0, -1, -2 ] ],		// 3
    [ [ 0, 1, 1, 2 ], [ 2, 1, 0, -1 ],  [ 0, -1, 0, -1 ], [ -2, -1, 0, 1 ], [ 0, 1, 0, 1 ] ],		// 4
    [ [ 0, 1, 1, 2 ], [ 1, 0, 1, 0 ],   [ 1, 0, -1, -2 ], [ -1, 0, -1, 0 ], [ -1, 0, 1, 2 ] ],		// 5
    [ [ 0, 0, 1, 1 ] ],																				// 6
    [ [ 0, 1, 2, 3 ], [ 1, 1, 0, -1 ],  [ 2, 0, -1, -2 ], [ -1, -1, 0, 1 ], [ -2, 0, 1, 2 ] ],		// 7
    [ [ 0, 1, 2, 3 ], [ 2, 0, -1, -2 ], [ 1, 1, 0, -1 ],  [ -2, 0, 1, 2 ],  [ -1, -1, 0, 1 ] ], 		// 8
    [ [ 0, 1, 2, 3 ], [ 1, 1, 0, -2 ],  [ 2, 0, -1 ,-1 ], [ -1, -1, 0, 2 ], [ -2, 0, 1, 1 ] ],		// 9
    [ [ 0, 1, 2, 3 ], [ 2, 0, 0, -2 ],  [ 1, 1, -1, -1 ], [ -2 ,0, 0, 2 ],  [ -1, -1, 1, 1 ] ],		// 10
    [ [ 0, 1, 2, 3 ], [ 1, 1, -1, -1 ], [ 2, 0, 0, -2 ],  [ -1, -1, 1, 1 ], [ -2, 0, 0, 2 ] ]		// 11
];
export const notRotatableX = [
    [ [ -1, -1, -1, 1, 2, 1, 2 ], [ 2, 3, 2, 3, 0, 1, 2 ], [ -2, -1, -2, -1, 1, 1, 1 ], [ -2 ,-1 ,0, -3, -2, -3, -2 ] ],	// 0
    [ [ -1, 1, -1, 1 ], [ 0, 2, 0, 1 ], [ -1, 1, -1, 1 ], [ -1, 0, -2, 0 ] ],					// 1
    [ [ 1, 2, 0, 1 ], [ 0, 0, 2, 2 ], [ -1, 0, -2, -1 ], [ -2, -2, 0, 0 ] ],					// 2
    [ [ 0, 1, 1, 2 ], [ 1, -1, 1, -1 ], [ -2, -1, -1, 0 ], [ 1, -1, 1, -1 ] ],					// 3
    [ [ 1, 2, 0, 2 ], [ 1, 2, 0, 2 ], [ -2, 0, -2, -1 ], [ -2, 0, -2, -1 ] ],					// 4
    [ [ -1, 1, 0, 1 ], [ 1, 2, 2, 0 ], [-1, 0, -1, 1 ], [ 0, -2, -2, -1 ] ],					// 5
    [ [ 0 ] ],																					// 6
    [ [ -1, -2, 0, 1, 0 ], [ 2, 2, 3, 0, 1 ], [ 0, -1, 0, 2, 1 ], [ -1, 0, -3, -2, -2 ] ],		// 7
    [ [ -1, 0, 2, -1, 2 ], [ 1, 2, 1, 1, 2 ], [ -2, 1, -2, 0, 1 ], [ -2, -1, -1, -2, -1 ] ],	// 8 
    [ [ -2, -1, -2, 1, -2, 0, 1, -1, 1 ], [ 1, 2, 3, 2, 0, 3, 0, 1, 2 ], 
      [ -1, 1, -1, 0, 2, -1, 2, 1, 2 ], [ -2, -1, 0, -3, 0, -2, -3, -2, -1 ] ],					// 9
    [ [ -1, 1, -1, 0, 2, -1, 1, 2, 0, 2 ], [ 1, 2, 3, 0, 2, 1, 3, 0, 1, 2 ], 
      [ -2, 0, -2, -1, 1, -2, 0, 1, -1, 1 ], [ -2, -1, 0, -3, -1, -2, 0, -3, -2, -1 ] ],		// 10
    [ [ -2, -1, -2, 0, 1, -2, -1, 1, 0, 1 ], [ 1, 2, 3, 1, 3, 0, 2, 0, 1, 2 ],
      [ -1, 0, -1, 1, 2, -1, 0, 2, 1, 2 ], [ -2, -1, 0, -2, 0, -3, -1, -3, -2, -1 ] ]			// 11
];
export const notRotatableY = [
    [ [ 0, 1, 2, 2, 2, 3, 3 ], [ -2, -2, -1, -1, 1, 1, 1 ], [ -3, -3, -2, -2, -2, -1, 0 ], [ -1, -1, -1, 1, 1, 2, 2 ] ], // 0
    [ [ 0, 0, 1, 2 ], [ -1, -1, 1, 1 ], [ -2, -1, 0, 0 ], [ -1, -1, 1, 1 ] ],					// 1
    [ [ 0, 0, 2, 2 ], [-2, -1, -1, 0 ], [ -2, -2, 0, 0 ], [ 0, 1, 1, 2 ] ],						// 2
    [ [ -1, -1, 1, 1 ], [ -2, -1, -1, 0 ], [ -1, -1, 1, 1 ], [ 0, 1, 1, 2 ] ],					// 3
    [ [ 0, 1, 2, 2 ], [ -2, -2, -1, 0 ], [ -2, -2, -1, 0 ], [ 0, 1, 2, 2 ] ],					// 4
    [ [ 0, 1, 2, 2 ], [ -1, -1, 0, 1 ], [ -2, -2, -1, 0 ], [ -1, 0, 1, 1 ] ],					// 5
    [ [ 0 ] ],
    [ [ 0, 1, 2, 2, 3 ], [ -1, 0, 0, 1, 2 ], [ -3, -2, -2, -1, 0 ], [ -2, -1, 0, 0, 1 ] ],		// 7
    [ [ 1, 1, 1, 2, 2 ], [ -2, -2, 0, 1, 1 ], [-2 ,-2, -1, -1, -1 ], [ -1, -1, 0, 2, 2 ] ], 	// 8
    [ [ 0, 0, 1, 1, 2, 2, 2, 3, 3 ], [ -1, -1, -1, 0, 1, 1, 2, 2, 2 ],
      [ -3, -3, -2, -2, -2, -1, -1, 0, 0 ], [ -2, -2, -2, -1, -1, 0, 1, 1, 1 ] ],				// 9
    [ [ 0, 0, 1, 1, 1, 2, 2, 2, 3, 3 ], [ -2, -2, -2, -1, -1, 0, 0, 1, 1, 1 ],
      [ -3, -3, -2, -2, -2, -1, -1, -1, 0, 0 ], [ -1, -1, -1, 0, 0, 1, 1, 2, 2, 2 ] ],			// 10
    [ [ 0, 0, 1, 1, 1, 2, 2, 2, 3, 3 ], [ -1, -1, -1, 0, 0, 1, 1, 2, 2, 2 ],
      [ -3, -3, -2, -2, -2, -1, -1, -1, 0, 0 ], [ -2, -2, -2, -1, -1, 0, 0, 1, 1, 1 ] ]			// 11			
];
export const centerPosX = [ 
                    1.5,	// 0
                    2,		// 1
                    1.5,	// 2
                    1.5,	// 3
                    2,		// 4
                    2,		// 5     1->
                    2,		// 6
                    2,		// 7
                    2,		// 8
                    2,		// 9
                    2,		// 10
                    2		// 11
];
export const centerPosY = [
                    2,		// 0
                    1.5,	// 1
                    1,		// 2
                    1,		// 3
                    1.5,	// 4
                    1.5,	// 5
                    1,		// 6
                    2,		// 7
                    2,		// 8
                    2,		// 9
                    2,		// 10
                    2		// 11
];		
    
    
export const frameSizeX = 1050;
export const frameSizeY = 800;

export const nextBrickPanelX = 405;
export const nextBrickPanelY = 240;

export const myPanelX = 52;
export const myPanelY = 72;

export const opponentPanelX = 593;
export const opponentPanelY = 72;

export const mySquareLen = 32;
export const oppoSquareLen = 32;
export const nextBrickLength = 32;

export const arcLength = 5;

export const numOfY = 24;
export const numOfX = 10;

export const numOfBricks = 7;

// export const myName;
// export const oppoName;


export class TetrisBrick {
    
    constructor( type ) {

        this.type = type
        this.rotate = 0
        this.color = brickColors[ type ]
        this.currPosX = new Array()
        this.currPosY = new Array()
            
        for( let i = 0 ; i < 4 ; i++ ) {

            this.currPosX[ i ] = squarePosX[ type ][ 0 ][ i ];
            this.currPosY[ i ] = squarePosY[ type ][ 0 ][ i ];
            
            if( type === 1 || type === 4 || type === 5 ) this.currPosY[ i ] += 1;
            if( type === 2 || type === 3 || type === 6 ) this.currPosY[ i ] += 2;
        } 
    }

    moveToLeft() {

        for( let i = 0 ; i < 4 ; i++ )
            --this.currPosX[ i ]
    }


    moveToRight() {

        for( let i = 0 ; i < 4 ; i++ )
            ++this.currPosX[ i ]
    }


    moveDown() {

        for( let i = 0 ; i < 4 ; i++ )	
            ++this.currPosY[ i ]
    }

    moveUp() {

        for( let i = 0 ; i < 4 ; i++ )	
            --this.currPosY[ i ]
    }

    rotateBrick( cells ) {

        if( this.type === 6 )		// 6번 타입 네모 블럭은 회전해도 동일한 모양
            return;


        // 가장 좌측, 가장 우측, 가장 하단이면 회전이 안됨

        // 0 -> 1 -> 2 -> 3 -> 4 -> 1 -> 2 -> 3 -> 4 -> 1 -> ...
        this.rotate = ( ++this.rotate ) % 4;

        if( this.rotate === 0 )
                this.rotate += 4;


        // 회전 후 블럭이 밖으로 나가면 안된다
        for( let i = 0 ; i < 4 ; i++ ) {

            if( this.currPosX[ i ] + squarePosX[ this.type ][ this.rotate ][ i ] > numOfX - 1 || 
                this.currPosX[ i ] + squarePosX[ this.type ][ this.rotate ][ i ] < 0 ||
                this.currPosY[ i ] + squarePosY[ this.type ][ this.rotate ][ i ]	> numOfY - 1 ) {

                if( --this.rotate === 0 )
                    this.rotate = 4;

                return;
            }
        }


        for( let i = 0 ; i < notRotatableX[ this.type ][ this.rotate - 1 ].length ; i++ ) {

            let x = this.currPosX[ 0 ] + notRotatableX[ this.type ][ this.rotate - 1 ][ i ];
            let y = this.currPosY[ 0 ] + notRotatableY[ this.type ][ this.rotate - 1 ][ i ];

            if( cells[ x ][ y ] >= 0 ) {

                if( --this.rotate === 0 )
                    this.rotate = 4;

                return;
            }
        }

        for( let i = 0 ; i < 4 ; i++ ) {

            this.currPosX[ i ] += squarePosX[ this.type ][ this.rotate ][ i ];
            this.currPosY[ i ] += squarePosY[ this.type ][ this.rotate ][ i ];			
        }

    }
}
